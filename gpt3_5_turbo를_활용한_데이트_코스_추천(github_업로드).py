# -*- coding: utf-8 -*-
"""GPT3.5-TURBO를 활용한 데이트 코스 추천(GITHUB 업로드).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XJ7NXEN1tzfxIxTlgRX2I2M3vU0xxkIU
"""

!pip install openai

import openai

# Set up OpenAI API key
api_key = 
openai.api_key = api_key

# Function to send a message to the OpenAI chatbot model and return its response
def send_message(message_log):
    # Use OpenAI's ChatCompletion API to get the chatbot's response
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",  # The name of the OpenAI chatbot model to use
        messages=message_log,   # The conversation history up to this point, as a list of dictionaries
        max_tokens=3800,        # The maximum number of tokens (words or subwords) in the generated response
        stop=None,              # The stopping sequence for the generated response, if any (not used here)
        temperature=0.7,        # The "creativity" of the generated response (higher temperature = more creative)
    )

    # Find the first response from the chatbot that has text in it (some responses may not have text)
    for choice in response.choices:
        if "text" in choice:
            return choice.text

    # If no response with text is found, return the first response's content (which may be empty)
    return response.choices[0].message.content


# Main function that runs the chatbot
def main():
    # Initialize the conversation history with a message from the chatbot
    message_log = [
        {"role": "system", "content": """You are LOCO which is designed to be able to assist with information gathering for a date spot and recommendation of a dating course, from some foundation conditions as an input.
Human that use LOCO want to have a lovely date with an excellent date course, so LOCO should satisfy the human's needs with a proper recommenation of a dating course.
Human may provide some foundation conditions like budget, time, and region and other requirements for a date.
Then LOCO should provide information and recommendation a date course with time schedule, date spots, recommended activities, expected cost and other useful information for each date spots that LOCO recommends within inputs.
It will be better if recommended date spots are more specific like 'D MUSEUM' and closer than 10km from the region that is given as foundation condition from the user.
```
For output, please us the following format :
Time :
Date Spot :
Recommended Acitivites : 
Expected Cost :
Other Useful Information : 
```
Finally, LOCO is a best guide that make a proper dating course for a couple with reflecting each provided conditions."""}
    ]

    # Set a flag to keep track of whether this is the first request in the conversation
    first_request = True

    # Start a loop that runs until the user types "quit"
    while True:
        if first_request:
            # If this is the first request, get the user's input and add it to the conversation history
            user_input = input("You: ")
            message_log.append({"role": "user", "content": user_input})

            # Send the conversation history to the chatbot and get its response
            response = send_message(message_log)

            # Add the chatbot's response to the conversation history and print it to the console
            message_log.append({"role": "LOCO", "content": response})
            print(f"LOCO: {response}")

            # Set the flag to False so that this branch is not executed again
            first_request = False
        else:
            # If this is not the first request, get the user's input and add it to the conversation history
            user_input = input("You: ")

            # If the user types "quit", end the loop and print a goodbye message
            if user_input.lower() == "quit":
                print("Goodbye!")
                break

            message_log.append({"role": "user", "content": user_input})

            # Send the conversation history to the chatbot and get its response
            response = send_message(message_log)

            # Add the chatbot's response to the conversation history and print it to the console
            message_log.append({"role": "assistant", "content": response})
            print(f"LOCO: {response}")


# Call the main function if this file is executed directly (not imported as a module)
if __name__ == "__main__":
    main()

