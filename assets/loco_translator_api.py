# -*- coding: utf-8 -*-
"""LOCO-Translator API.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YEWmkgpTLXSZMNo2b5vw3RWq-PTzmJ2i
"""

!pip install openai
!pip install google-cloud-translate

from google.api_core.exceptions import AlreadyExists
#특정 단어를 특정 뜻으로 번역하는 함수 정의
#따로 Google Cloud Storage에 버킷을 생성하고 용어집(glossary)를 csv 형태로 업로드하여 사용할 수 있음
#아직 어떤 용어를 어떻게 번역할지 아이디어가 없어서 9개 정도만 넣어놓았음. 같이 업로드한 'loco translator glossary.csv'에서 확인 가능함
#참조 : https://cloud.google.com/translate/docs/advanced/hybrid-glossaries-tutorial?hl=ko

def create_glossary(languages, project_id, glossary_name, glossary_uri):
    """Creates a GCP glossary resource
    Assumes you've already manually uploaded a glossary to Cloud Storage

    ARGS
    languages: list of languages in the glossary
    project_id: GCP project id
    glossary_name: name you want to give this glossary resource
    glossary_uri: the uri of the glossary you uploaded to Cloud Storage

    RETURNS
    nothing
    """

    # Instantiates a client
    client = translate.TranslationServiceClient()

    # Designates the data center location that you want to use
    location = "us-central1"

    # Set glossary resource name
    name = client.glossary_path(project_id, location, glossary_name)

    # Set language codes
    language_codes_set = translate.Glossary.LanguageCodesSet(
        language_codes=languages
    )

    gcs_source = translate.GcsSource(input_uri=glossary_uri)

    input_config = translate.GlossaryInputConfig(gcs_source=gcs_source)

    # Set glossary resource information
    glossary = translate.Glossary(
        name=name, language_codes_set=language_codes_set, input_config=input_config
    )

    parent = f"projects/{project_id}/locations/{location}"

    # Create glossary resource
    # Handle exception for case in which a glossary
    #  with glossary_name already exists
    try:
        operation = client.create_glossary(parent=parent, glossary=glossary)
        operation.result(timeout=90)
        print("Created glossary " + glossary_name + ".")
    except AlreadyExists:
        print(
            "The glossary "
            + glossary_name
            + " already exists. No new glossary was created."
        )






create_glossary(['en', 'ko'], "delta-coast-382412", "loco_translator_glossary", 'gs://loco-translator-glossary/loco translator glossary.csv')
#['en', 'ko'] : 영어에서 한국어로의 용어집
#"delta-coast-382412" : 내 Google Cloud Platform의 Project ID
#"loco_translator_glossary" : 용어집 이름 지정 -> 이름 변경 시 아래의 translate 내에서 사용되는 용어집 이름 변경시켜줘야함
#gs://loco-translator-glossary/loco translator glossary.csv : URL







#https://cloud.google.com/translate/docs/advanced/translating-text-v3?hl=ko
#https://hoze.tistory.com/2130
#https://gist.github.com/noahgift/de40ac37b3d51b22835c9260d41599bc

import os
os.environ["GOOGLE_APPLICATION_CREDENTIALS"]="/content/drive/MyDrive/b7f9.json" #GCP Key

!echo $GOOGLE_APPLICATION_CREDENTIALS

from google.cloud import translate

#실제 사용 시에는 main 함수 내에서 print(result)를 print(translate_text(result))로 바꿔주면 됨됨
def translate_text(text="YOUR_TEXT_TO_TRANSLATE", project_id="delta-coast-382412"):
    """Translating Text."""

    client = translate.TranslationServiceClient()

    location = "us-central1"

    glossary = client.glossary_path(project_id, location, 'loco_translator_glossary')
    #아까 지정한 용어집 이름과 같이 맞춰줘야 함

    glossary_config = translate.TranslateTextGlossaryConfig(glossary=glossary)

    parent = f"projects/{project_id}/locations/{location}"

    # Translate text from English to Korean
    response = client.translate_text(
        request={
            "parent": parent,
            "contents": [text],
            "mime_type": "text/plain",  # mime types: text/plain, text/html
            "source_language_code": "en-US",
            "target_language_code": "ko",
            "glossary_config": glossary_config,
        }
    )

    # Display the translation for each input text provided
    return response.glossary_translations[0].translated_text
